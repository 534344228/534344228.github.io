<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[mybatis学习笔记(2)-mybatis概述]]></title>
    <url>%2F2019%2F05%2F16%2Fmybatis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-2-mybatis%E6%A6%82%E8%BF%B0%2F</url>
    <content type="text"><![CDATA[本文对mybatis做一个简单介绍，包括框架原理，执行过程，开发方法，输入输出映射以及动态sql。 mybatis 介绍mybatis是一个持久层的框架，是apache下的顶级项目。mybatis托管到goolecode下，再后来托管到github下。mybatis让程序将主要精力放在sql上，通过mybatis提供的映射方式，自由灵活生成（半自动化，大部分需要程序员编写sql）满足需要sql语句。mybatis可以将向 preparedStatement中的输入参数自动进行输入映射，将查询结果集灵活映射成java对象。（输出映射） 框架原理mybatis框架 mybatis框架执行过程 配置mybatis的配置文件，SqlMapConfig.xml（名称不固定） 通过配置文件，加载mybatis运行环境，创建SqlSessionFactory会话工厂(SqlSessionFactory在实际使用时按单例方式) 通过SqlSessionFactory创建SqlSession。SqlSession是一个面向用户接口（提供操作数据库方法），实现对象是线程不安全的，建议sqlSession应用场合在方法体内。 调用sqlSession的方法去操作数据。如果需要提交事务，需要执行SqlSession的commit()方法。 释放资源，关闭SqlSession mybatis开发dao的方法 原始dao 需要程序员编写dao接口和实现类 需要在dao实现类中注入一个SqlSessionFactory工厂 mapper代理开发方法（建议使用） 只需要程序员编写mapper接口（就是dao接口）。 程序员在编写mapper.xml(映射文件)和mapper.java需要遵循一个开发规范： mapper.xml中namespace就是mapper.java的类全路径。 mapper.xml中statement的id和mapper.java中方法名一致。 mapper.xml中statement的parameterType指定输入参数的类型和mapper.java的方法输入参数类型一致 mapper.xml中statement的resultType指定输出结果的类型和mapper.java的方法返回值类型一致。 SqlMapConfig.xml配置文件：可以配置properties属性、别名、mapper加载。 输入映射和输出映射 输入映射： parameterType：指定输入参数类型可以简单类型、pojo、hashmap。 对于综合查询，建议parameterType使用包装的pojo，有利于系统 扩展。 输出映射： resultType：查询到的列名和resultType指定的pojo的属性名一致，才能映射成功。 reusltMap：可以通过resultMap 完成一些高级映射。如果查询到的列名和映射的pojo的属性名不一致时，通过resultMap设置列名和属性名之间的对应关系（映射关系）。可以完成映射。 高级映射：将关联查询的列映射到一个pojo属性中。（一对一）将关联查询的列映射到一个List中。（一对多） 动态sql：（重点） if判断（掌握） where foreach sql片段（掌握）]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[mybatis学习笔记(1)-对原生jdbc程序中的问题总结]]></title>
    <url>%2F2019%2F05%2F16%2Fmybatis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-1-%E5%AF%B9%E5%8E%9F%E7%94%9Fjdbc%E7%A8%8B%E5%BA%8F%E4%B8%AD%E7%9A%84%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93%2F</url>
    <content type="text"><![CDATA[本文总结jdbc编程的一般步骤，总结这样编程存在的问题，并附上典型地jdbc示例demo jdbc编程步骤 加载数据库驱动 创建并获取数据库链接 创建jdbc statement对象 设置sql语句 设置sql语句中的参数(使用preparedStatement) 通过statement执行sql并获取结果 对sql执行结果进行解析处理 释放资源(resultSet、preparedstatement、connection) 问题总结 数据库连接，使用时就创建，不使用立即释放，对数据库进行频繁连接开启和关闭，造成数据库资源浪费，影响数据库性能。 设想：使用数据库连接池管理数据库连接。 将sql语句硬编码到java代码中，如果sql语句修改，需要重新编译java代码，不利于系统维护。 设想：将sql语句配置在xml配置文件中，即使sql变化，不需要对java代码进行重新编译。 向preparedStatement中设置参数，对占位符号位置和设置参数值，硬编码在java代码中，不利于系统维护。 设想：将sql语句及占位符号和参数全部配置在xml中。 从resutSet中遍历结果集数据时，存在硬编码，将获取表的字段进行硬编码，不利于系统维护。 设想：将查询的结果集，自动映射成java对象。 参考代码12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970package com.iot.mybatis.jdbc;//import java.sql.*;import java.sql.Connection;import java.sql.DriverManager;import java.sql.PreparedStatement;import java.sql.ResultSet;import java.sql.SQLException;/** * Created by Administrator on 2016/2/21. */public class JdbcTest &#123; public static void main(String[] args) &#123; //数据库连接 Connection connection = null; //预编译的Statement，使用预编译的Statement提高数据库性能 PreparedStatement preparedStatement = null; //结果集 ResultSet resultSet = null; try &#123; //加载数据库驱动 Class.forName("com.mysql.jdbc.Driver"); //通过驱动管理类获取数据库链接 connection = DriverManager.getConnection("jdbc:mysql://120.25.162.238:3306/mybatis001?characterEncoding=utf-8", "root", "123"); //定义sql语句 ?表示占位符 String sql = "select * from user where username = ?"; //获取预处理statement preparedStatement = connection.prepareStatement(sql); //设置参数，第一个参数为sql语句中参数的序号（从1开始），第二个参数为设置的参数值 preparedStatement.setString(1, "王五"); //向数据库发出sql执行查询，查询出结果集 resultSet = preparedStatement.executeQuery(); //遍历查询结果集 while(resultSet.next())&#123; System.out.println(resultSet.getString("id")+" "+resultSet.getString("username")); &#125; &#125; catch (Exception e) &#123; e.printStackTrace(); &#125;finally&#123; //释放资源 if(resultSet!=null)&#123; try &#123; resultSet.close(); &#125; catch (SQLException e) &#123; // TODO Auto-generated catch block e.printStackTrace(); &#125; &#125; if(preparedStatement!=null)&#123; try &#123; preparedStatement.close(); &#125; catch (SQLException e) &#123; // TODO Auto-generated catch block e.printStackTrace(); &#125; &#125; if(connection!=null)&#123; try &#123; connection.close(); &#125; catch (SQLException e) &#123; // TODO Auto-generated catch block e.printStackTrace(); &#125; &#125; &#125; &#125;&#125;]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>mybatis</tag>
      </tags>
  </entry>
</search>
